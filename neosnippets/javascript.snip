snippet :f
options head
  ${1:#:method_name}: function(${2:#:attribute}) {
    ${0:TARGET}
  }

snippet function
abbr    func
options word
  function ${1:#:function_name}(${2:#:argument}) {
    ${0:TARGET}
  }

snippet function2
abbr    func2
options head
  function ${1:function_name}(${2:argument}) {
    ${0:TARGET}
  }

snippet proto
options head
  ${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {
    ${0:TARGET}
  };


snippet f
options word
  function(${1}) { ${0:TARGET} };

snippet if
options head
  if (${1:true}) {
    ${0:TARGET}
  }

snippet if-else
abbr ife
options head
  if (${1:#:condition}) {
    ${2:TARGET}
  } else {
    ${3}
  }

snippet for
options head
  for (var ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
    ${0:TARGET}
  }

snippet forin
options head
  for (var ${1:i} in ${2:#:Things}) {
    ${0:TARGET}
  }

snippet while
options head
  while (${1:true}) {
    ${0:TARGET}
  }

snippet switch
options head
  switch (${1:#:var}) {
    case ${2:#:val}:
      ${0:TARGET}
      break;
  }

snippet try
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  }

snippet try_finally
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  } finally {
    ${4}
  }


snippet key-value
abbr :,
options word
  ${1:#:value_name}: ${0:#:value},

#snippet key
#options word
#  ${1:#:key}: "${2:#:value}"}${3:, }

snippet setTimeout-function
options head
  setTimeout(function() { ${0} }, ${1:10});

snippet debugger
alias db
options head
  debugger;

snippet console-log
alias cl
options head
  console.log(${0:TARGET});

snippet console-trace
alias ct
options head
  console.trace();

snippet console-error
alias ce
options head
  console.error(${0:TARGET});

snippet console-warn
alias cw
options head
  console.warn(${0:TARGET});

snippet console-info
alias ci
options head
  console.info(${0:TARGET});

snippet iife
options head
  (function(${1}) {
    'use strict';
    ${0:TARGET}
  })(${2});

snippet js
options head
  JSON.stringify(${1:TARGET}, ${2:null}, ${3:2});

snippet jsc
options head
  console.log(JSON.stringify(${1:TARGET}, ${2:null}, ${3:2}));

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
    constructor(${2:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     class-extends
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SuperClass} {
    constructor(${3:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     static
options     head
  static ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     set
options     head
  set ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     get
options     head
  get ${1:#:NAME}() {
    ${0:TARGET}
  }

snippet     import
abbr        import { member, ... } from "module-name";
options     head
  import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import-default
abbr        import defaultMember from "module-name";
options     head
  import ${1:defaultMember} from "${0:TARGET}";

snippet     import-all
abbr        import * as NAME from "...";
options     head
  import * as ${1:NAME} from "${0:TARGET}";

snippet     import-default-member
abbr        import defaultMember, { member, ... } from "module-name";
options     head
  import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";


snippet add
options head
	${1:obj}.add('${2:selector expression}')

snippet addClass
options     head
	${1:obj}.addClass('${2:class name}')

snippet after
options     head
	${1:obj}.after('${2:Some text <b>and bold!</b>}')

snippet ajax
options     head
	$.ajax({
		url: '${1:mydomain.com/url}',
		type: '${2:POST}',
		dataType: '${3:xml/html/script/json}',
		data: $.param( $('${4:Element or Expression}') ),
		complete: function (jqXHR, textStatus) {
			${5:#:callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:#:success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${0:#:error callback}
		}
	});

snippet ajaxcomplete
options     head
	${1:obj}.ajaxComplete(function (${1:e}, xhr, settings) {
		${0:#:callback}
	});

snippet ajaxerror
options     head
	${1:obj}.ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:#:error callback}
	});
	${0}

snippet ajaxget
options     head
	$.get('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${0:#:success callback}
		}
	);

snippet ajaxpost
options     head
	$.post('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${0:#:success callback}
		}
	);

snippet ajaxprefilter
options     head
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${0:#:Modify options, control originalOptions, store jqXHR, etc}
	});

snippet ajaxsend
options     head
	${1:obj}.ajaxSend(function (${1:request, settings}) {
		${2:#:error callback}
	});
	${0}

snippet ajaxsetup
options     head
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:Element or Expression}") ),
		complete: function (jqXHR, textStatus) {
			${5:#:callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:#:success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${0:#:error callback}
		}
	});

snippet ajaxstart
options     head
	$.ajaxStart(function () {
		${1:#:handler for when an AJAX call is started and no other AJAX calls are in progress};
	});
	${0}

snippet ajaxstop
options     head
	$.ajaxStop(function () {
		${1:#:handler for when all AJAX calls have been completed};
	});
	${0}

snippet ajaxsuccess
options     head
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:#:handler for when any AJAX call is successfully completed};
	});
	${0}

snippet andself
options     head
	${1:obj}.andSelf()

snippet animate
options     head
	${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})

snippet append
options     head
	${1:obj}.append('${2:Some text <b>and bold!</b>}')

snippet appendTo
options     head
	${1:obj}.appendTo('${2:selector expression}')

snippet attr
options     head
	${1:obj}.attr('${2:attribute}', '${3:value}')

snippet attrm
options     head
	${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})

snippet before
options     head
	${1:obj}.before('${2:Some text <b>and bold!</b>}')

snippet bind
options     head
	${1:obj}.bind('${2:event name}', function (${3:e}) {
		${0:#:event handler}
	});

snippet blur
options     head
	${1:obj}.blur(function (${2:e}) {
		${0:#:event handler}
	});

snippet C
options     head
	$.Callbacks()

snippet Cadd
options     head
	${1:callbacks}.add(${2:callbacks})

snippet Cdis
options     head
	${1:callbacks}.disable()

snippet Cempty
options     head
	${1:callbacks}.empty()

snippet Cfire
options     head
	${1:callbacks}.fire(${2:args})

snippet Cfired
options     head
	${1:callbacks}.fired()

snippet Cfirew
options     head
	${1:callbacks}.fireWith(${2:this}, ${3:args})

snippet Chas
options     head
	${1:callbacks}.has(${2:callback})

snippet Clock
options     head
	${1:callbacks}.lock()

snippet Clocked
options     head
	${1:callbacks}.locked()

snippet Crem
options     head
	${1:callbacks}.remove(${2:callbacks})

snippet change
options     head
	${1:obj}.change(function (${2:e}) {
		${0:#:event handler}
	});

snippet children
options     head
	${1:obj}.children('${2:selector expression}')

snippet clearq
options     head
	${1:obj}.clearQueue(${2:'queue name'})

snippet click
options     head
	${1:obj}.click(function (${2:e}) {
		${0:#:event handler}
	});

snippet clone
options     head
	${1:obj}.clone()

snippet contains
options     head
	$.contains(${1:container}, ${0:contents});

snippet css
options     head
	${1:obj}.css('${2:attribute}', '${3:value}')

snippet csshooks
options     head
	$.cssHooks['${1:CSS prop}'] = {
		get: function (elem, computed, extra) {
			${2:#:handle getting the CSS property}
		},
		set: function (elem, value) {
			${0:#:handle setting the CSS value}
		}
	};

snippet cssm
options   head
	${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})

snippet D
options   head
	$.Deferred()

snippet Dalways
options   head
	${1:deferred}.always(${2:callbacks})

snippet Ddone
options   head
	${1:deferred}.done(${2:callbacks})

snippet Dfail
options   head
	${1:deferred}.fail(${2:callbacks})

snippet Disrej
options   head
	${1:deferred}.isRejected()

snippet Disres
options   head
	${1:deferred}.isResolved()

snippet Dnotify
options   head
	${1:deferred}.notify(${2:args})

snippet Dnotifyw
options   head
	${1:deferred}.notifyWith(${2:this}, ${3:args})

snippet Dpipe
options   head
	${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})

snippet Dprog
options   head
	${1:deferred}.progress(${2:callbacks})

snippet Dprom
options   head
	${1:deferred}.promise(${2:target})

snippet Drej
options   head
	${1:deferred}.reject(${2:args})

snippet Drejw
options   head
	${1:deferred}.rejectWith(${2:this}, ${3:args})

snippet Dres
options   head
	${1:deferred}.resolve(${2:args})

snippet Dresw
options   head
	${1:deferred}.resolveWith(${2:this}, ${3:args})

snippet Dstate
options   head
	${1:deferred}.state()

snippet Dthen
options   head
	${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})

snippet Dwhen
options   head
	$.when(${1:deferreds})

snippet data
options   head
	${1:obj}.data(${2:obj})

snippet dataa
options   head
	$.data('${1:selector expression}', '${2:key}'${3:, 'value'})

snippet dblclick
options   head
	${1:obj}.dblclick(function (${2:e}) {
		${0:#:event handler}
	});

snippet delay
options   head
	${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})

snippet dele
options   head
	${1:obj}.delegate('${2:selector expression}', '${3:event name}', function (${4:e}) {
		${0:#:event handler}
	});

snippet deq
options   head
	${1:obj}.dequeue(${2:'queue name'})

snippet deqq
options   head
	$.dequeue('${1:selector expression}'${2:, 'queue name'})

snippet detach
options   head
	${1:obj}.detach('${2:selector expression}')

snippet die
options   head
	${1:obj}.die(${2:event}, ${3:handler})

snippet each
options   head
	${1:obj}.each(function (index) {
		${0:this.innerHTML = this + " is the element, " + index + " is the position";}
	});

snippet el
options   head
	$('<${1}/>'${2:, {}})

snippet eltrim
options   head
	$.trim('${1:string}')

snippet empty
options   head
	${1:obj}.empty()

snippet end
options   head
	${1:obj}.end()

snippet eq
options   head
	${1:obj}.eq(${2:element index})

snippet error
options   head
	${1:obj}.error(function (${2:e}) {
		${0:#:event handler}
	});

snippet eventsmap
options   head
	{
		:f${0}
	}

snippet extend
options   head
	$.extend(${1:true, }${2:target}, ${3:obj})

snippet fadein
options   head
	${1:obj}.fadeIn('${2:slow/400/fast}')

snippet fadeinc
options   head
	${1:obj}.fadeIn('slow/400/fast', function () {
		${0:#:callback};
	});

snippet fadeout
options   head
	${1:obj}.fadeOut('${2:slow/400/fast}')

snippet fadeoutc
options   head
	${1:obj}.fadeOut('slow/400/fast', function () {
		${0:#:callback};
	});

snippet fadeto
options   head
	${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})

snippet fadetoc
options   head
	${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function () {
		${0:#:callback};
	});

snippet filter
options   head
	${1:obj}.filter('${2:selector expression}')

snippet filtert
options   head
	${1:obj}.filter(function (${2:index}) {
		${3}
	})

snippet find
options   head
	${1:obj}.find('${2:selector expression}')

snippet focus
options   head
	${1:obj}.focus(function (${2:e}) {
		${0:#:event handler}
	});

snippet focusin
options   head
	${1:obj}.focusIn(function (${2:e}) {
		${0:#:event handler}
	});

snippet focusout
options   head
	${1:obj}.focusOut(function (${2:e}) {
		${0:#:event handler}
	});

snippet get
options   head
	${1:obj}.get(${2:element index})

snippet getjson
options   head
	$.getJSON('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${0:#:success callback}
		}
	);

snippet getscript
options   head
	$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
		${0:#:callback}
	});

snippet grep
options   head
	$.grep(${1:array}, function (item, index) {
		${2}
	}${0:, true});

snippet hasc
options   head
	${1:obj}.hasClass('${2:className}')

snippet hasd
options   head
	$.hasData('${0:selector expression}');

snippet height
options   head
	${1:obj}.height(${2:integer})

snippet hide
options   head
	${1:obj}.hide('${2:slow/400/fast}')

snippet hidec
options   head
	${1:obj}.hide('${2:slow/400/fast}', function () {
		${0:#:callback}
	});

snippet hover
options   head
	${1:obj}.hover(function (${2:e}) {
		${3:#:event handler}
	}, function ($2) {
		${4:#:event handler}
	});

snippet html
options   head
	${1:obj}.html('${2:Some text <b>and bold!</b>}')

snippet inarr
options   head
	$.inArray(${1:value}, ${0:array});

snippet insa
options   head
	${1:obj}.insertAfter('${2:selector expression}')

snippet insb
options   head
	${1:obj}.insertBefore('${2:selector expression}')

snippet is
options   head
	${1:obj}.is('${2:selector expression}')

snippet isarr
options   head
	$.isArray(${1:obj})

snippet isempty
options   head
	$.isEmptyObject(${1:obj})

snippet isfunc
options   head
	$.isFunction(${1:obj})

snippet isnum
options   head
	$.isNumeric(${1:value})

snippet isobj
options   head
	$.isPlainObject(${1:obj})

snippet iswin
options   head
	$.isWindow(${1:obj})

snippet isxml
options   head
	$.isXMLDoc(${1:node})

snippet jj
options   head
	$('${1:selector}')

snippet kdown
options   head
	${1:obj}.keydown(function (${2:e}) {
		${0:#:event handler}
	});

snippet kpress
options   head
	${1:obj}.keypress(function (${2:e}) {
		${0:#:event handler}
	});

snippet kup
options   head
	${1:obj}.keyup(function (${2:e}) {
		${0:#:event handler}
	});

snippet last
options   head
	${1:obj}.last('${1:selector expression}')

snippet live
options   head
	${1:obj}.live('${2:events}', function (${3:e}) {
		${0:#:event handler}
	});

snippet load
options   head
	${1:obj}.load(function (${2:e}) {
		${0:#:event handler}
	});

snippet loadf
options   head
	${1:obj}.load('${2:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${0:#:success callback}
		}
	});

snippet makearray
options   head
	$.makeArray(${0:obj});

snippet map
options   head
	${1:obj}.map(function (${2:index}, ${3:element}) {
		${0:#:callback}
	});

snippet mapp
options   head
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${0:#:callback}
	});

snippet merge
options   head
	$.merge(${1:target}, ${0:original});

snippet mdown
options   head
	${1:obj}.mousedown(function (${2:e}) {
		${0:#:event handler}
	});

snippet menter
options   head
	${1:obj}.mouseenter(function (${2:e}) {
		${0:#:event handler}
	});

snippet mleave
options   head
	${1:obj}.mouseleave(function (${2:e}) {
		${0:#:event handler}
	});

snippet mmove
options   head
	${1:obj}.mousemove(function (${2:e}) {
		${0:#:event handler}
	});

snippet mout
options   head
	${1:obj}.mouseout(function (${2:e}) {
		${0:#:event handler}
	});

snippet mover
options   head
	${1:obj}.mouseover(function (${2:e}) {
		${0:#:event handler}
	});

snippet mup
options   head
	${1:obj}.mouseup(function (${2:e}) {
		${0:#:event handler}
	});

snippet next
options   head
	${1:obj}.next('${2:selector expression}')

snippet nexta
options   head
	${1:obj}.nextAll('${2:selector expression}')

snippet nextu
options   head
	${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})

snippet not
options   head
	${1:obj}.not('${2:selector expression}')

snippet off
options   head
	${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})

snippet offset
options   head
	${1:obj}.offset()

snippet offsetp
options   head
	${1:obj}.offsetParent()

snippet on
options   head
	${1:obj}.on('${2:events}', '${3:selector expression}', function (${4:e}) {
		${0:#:event handler}
	});

snippet one
options   head
	${1:obj}.one('${2:event name}', function (${3:e}) {
		${0:#:event handler}
	});

snippet outerh
options   head
	${1:obj}.outerHeight()

snippet outerw
options   head
	${1:obj}.outerWidth()

snippet param
options   head
	$.param(${1:obj})

snippet parent
options   head
	${1:obj}.parent('${2:selector expression}')

snippet parents
options   head
	${1:obj}.parents('${2:selector expression}')

snippet parentsu
options   head
	${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})

snippet parsejson
options   head
	$.parseJSON(${1:data})

snippet parsexml
options   head
	$.parseXML(${1:data})

snippet pos
options   head
	${1:obj}.position()

snippet prepend
options   head
	${1:obj}.prepend('${2:Some text <b>and bold!</b>}')

snippet prependto
options   head
	${1:obj}.prependTo('${2:selector expression}')

snippet prev
options   head
	${1:obj}.prev('${2:selector expression}')

snippet preva
options   head
	${1:obj}.prevAll('${2:selector expression}')

snippet prevu
options   head
	${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})

snippet promise
options   head
	${1:obj}.promise(${2:'fx'}, ${3:target})

snippet prop
options   head
	${1:obj}.prop('${2:property name}')

snippet proxy
options   head
	$.proxy(${1:function}, ${2:this})

snippet pushstack
options   head
	${1:obj}.pushStack(${2:elements})

snippet queue
options   head
	${1:obj}.queue(${2:name}${3:, newQueue})

snippet queuee
options   head
	$.queue(${1:element}${2:, name}${3:, newQueue})

snippet ready
options   head
	$(function () {
		${0}
	});

snippet rem
options   head
	${1:obj}.remove()

snippet rema
options   head
	${1:obj}.removeAttr('${2:attribute name}')

snippet remc
options   head
	${1:obj}.removeClass('${2:class name}')

snippet remd
options   head
	${1:obj}.removeData('${2:key name}')

snippet remdd
options   head
	$.removeData(${1:element}${2:, 'key name}')

snippet remp
options   head
	${1:obj}.removeProp('${2:property name}')

snippet repa
options   head
	${1:obj}.replaceAll(${2:target})

snippet repw
options   head
	${1:obj}.replaceWith(${2:content})

snippet reset
options   head
	${1:obj}.reset(function (${2:e}) {
		${0:#:event handler}
	});

snippet resize
options   head
	${1:obj}.resize(function (${2:e}) {
		${0:#:event handler}
	});

snippet scroll
options   head
	${1:obj}.scroll(function (${2:e}) {
		${0:#:event handler}
	});

snippet scrolll
options   head
	${1:obj}.scrollLeft(${2:value})

snippet scrollt
options   head
	${1:obj}.scrollTop(${2:value})

snippet sdown
options   head
	${1:obj}.slideDown('${2:slow/400/fast}')

snippet sdownc
options   head
	${1:obj}.slideDown('${2:slow/400/fast}', function () {
		${0:#:callback};
	});

snippet select
options     head
	${1:obj}.select(function (${2:e}) {
		${0:#:event handler}
	});

snippet serialize
options     head
	${1:obj}.serialize()

snippet serializea
options     head
	${1:obj}.serializeArray()

snippet show
options     head
	${1:obj}.show('${2:slow/400/fast}')

snippet showc
options     head
	${1:obj}.show('${2:slow/400/fast}', function () {
		${0:#:callback}
	});

snippet sib
options     head
	${1:obj}.siblings('${2:selector expression}')

snippet size
options     head
	${1:obj}.size()

snippet slice
options     head
	${1:obj}.slice(${2:start}${3:, end})

snippet stoggle
options     head
	${1:obj}.slideToggle('${2:slow/400/fast}')

snippet stop
options     head
	${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})

snippet submit
options     head
	${1:obj}.submit(function (${2:e}) {
		${0:#:event handler}
	});

snippet sup
options     head
	${1:obj}.slideUp('${2:slow/400/fast}')

snippet supc
options     head
	${1:obj}.slideUp('${2:slow/400/fast}', function () {
		${0:#:callback};
	});

snippet text
options     head
	${1:obj}.text(${2:'some text'})

snippet this
options     head
	$(this)

snippet toarr
options     head
	${0:obj}.toArray()

snippet tog
options     head
	${1:obj}.toggle(function (${2:e}) {
		${3:#:event handler}
	}, function ($2) {
		${4:#:event handler}
	});
	${0}

snippet togclass
options     head
	${1:obj}.toggleClass('${2:class name}')

snippet togsh
options     head
	${1:obj}.toggle('${2:slow/400/fast}')

snippet trig
options     head
	${1:obj}.trigger('${2:event name}')

snippet trigh
options     head
	${1:obj}.triggerHandler('${2:event name}')

snippet $trim
options     head
	$.trim(${1:str})

snippet $type
options     head
	$.type(${1:obj})

snippet unbind
options     head
	${1:obj}.unbind('${2:event name}')

snippet undele
options     head
	${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})

snippet uniq
options     head
	$.unique(${1:array})

snippet unload
options     head
	${1:obj}.unload(function (${2:e}) {
		${0:#:event handler}
	});

snippet unwrap
options     head
	${1:obj}.unwrap()

snippet val
options     head
	${1:obj}.val('${2:text}')

snippet width
options     head
	${1:obj}.width(${2:integer})

snippet wrap
options     head
	${1:obj}.wrap('${2:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')
